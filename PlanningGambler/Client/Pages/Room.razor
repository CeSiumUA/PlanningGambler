@page "/room"
@using Blazored.LocalStorage;
@using MudBlazor
@using PlanningGambler.Client.Models;
@using PlanningGambler.Client.Services.Interfaces;
@using PlanningGambler.Client.Services;
@using PlanningGambler.Shared.Data;
@using PlanningGambler.Shared.Dtos.Response;

@inject IRoomEntryProvider _roomEntryProvider
@inject ILocalStorageService _localStorageService
@inject NavigationManager _navigationManager
@inject HubConnectionService _hubConnectionService
@inject InterComponentsService _interComponentsService
@inject IJSRuntime _jsInterop
@inject ISnackbar _snackBarService

<PageTitle>Planning Room</PageTitle>

@if (PlanningRoom != null)
{
    <MudGrid>
        @foreach (var member in PlanningRoom.Members)
        {
            <MudItem>
                <MudCard>
                    <MudCardContent>
                        <MudText>@member.DisplayName</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
}
else
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
}

@code {
    private RoomModel PlanningRoom = default!;

    private Dictionary<Guid, VotingMemberModel> VotingMembers = new Dictionary<Guid, VotingMemberModel>();

    protected override async Task OnInitializedAsync()
    {
        var token = await _localStorageService.GetItemAsync<TokenResponse?>(AppConstants.TokenStoreKey);

        if(token != null)
        {
            var isTokenValid = await _roomEntryProvider.CheckTokenValidity(token.Token);
            if (!isTokenValid)
            {
                _navigationManager.NavigateTo("/");
            }
            else
            {
                await InitializeRoom(token.Token);
            }
        }
        else
        {
            _navigationManager.NavigateTo("/");
        }

        await base.OnInitializedAsync();
    }

    private async Task InitializeRoom(string token)
    {
        await _hubConnectionService.StartConnectionAsync(token);
        RegisterHandlers();
        await GetRoom();
    }

    private async Task GetRoom()
    {
        var room = await _hubConnectionService.GetRoom();

        PlanningRoom = new RoomModel()
        {
            Id = room.Id,
            CurrentStageId = room.CurrentStageId,
            Stages = room.Stages.Select(stage => new RoomStageModel
            {
                Id = stage.Id,
                IsInProgress = stage.IsInProgress,
                Name = stage.Name,
                Votes = stage.Votes.Select(vote => new RoomVoteModel
                {
                    Id = vote.Id,
                    IsHidden = vote.IsVoteHidden,
                    VoteType = vote.VoteType,
                    MemberId = vote.MemberId
                }).ToList()
            }).ToList(),
            Members = room.Members.Select(member => new RoomMemberModel
            {
                Id = member.Id,
                DisplayName = member.DisplayName,
                MemberType = member.MemberType
            }).ToList()
        };

        _interComponentsService.InvokeRoomCreated(PlanningRoom);
    }

    private void RegisterHandlers()
    {
        _interComponentsService.ShareRoomEventTriggered += async (_, e) => await ShareRoom(e);
        _interComponentsService.VoteStated += async (_, e) => await Vote(e);
        _interComponentsService.GetRoomStagesModelsRequested += () => PlanningRoom;
        _interComponentsService.CreateStageRequested += async (_, e) => await CreateStage(e);
        _interComponentsService.SelectStageRequested += async (_, e) => await SelectStage(e);

        _hubConnectionService.StageCreated += (_, e) => HandleStageCreated(e);
        _hubConnectionService.StageSelected += (_, e) => HandleStageSelected(e);
        _hubConnectionService.MemberConnected += (_, e) => HandleMemberConnected(e);
        _hubConnectionService.MemberDisconnected += (_, e) => HandleMemberDisconnected(e);
    }

    private void HandleMemberConnected(MemberConnectedResponseDto member)
    {
        PlanningRoom.Members.Add(new RoomMemberModel()
        {
            DisplayName = member.DisplayName,
            Id = member.Userid,
            MemberType = member.MemberType
        });
        StateHasChanged();
    }

    private void HandleMemberDisconnected(MemberDisconnectedResponseDto member)
    {
        PlanningRoom.Members.RemoveAll(x => x.Id == member.UserId);
        StateHasChanged();
    }

    private void HandleStageCreated(StageDto stage)
    {
        PlanningRoom.Stages.Add(new RoomStageModel()
        {
            Id = stage.Id,
            IsInProgress = stage.IsInProgress,
            Name = stage.Name,
            Votes = stage.Votes.Select(vote => new RoomVoteModel()
            {
                Id = vote.Id,
                VoteType = vote.VoteType,
                IsHidden = vote.IsVoteHidden,
                MemberId = vote.MemberId
            }).ToList()
        });

        _interComponentsService.InvokeStageCreated(stage);
    }

    private void HandleStageSelected(SelectStageResponseDto selectionResult)
    {
        if (selectionResult.IsSelected)
        {
            PlanningRoom.CurrentStageId = selectionResult.StageId;
            _interComponentsService.InvokeStageSelected(selectionResult.StageId);
        }
    }

    private async Task SelectStage(Guid stageId)
    {
        var selectionResult = await _hubConnectionService.SelectStage(stageId);
        HandleStageSelected(selectionResult);
    }

    private async Task CreateStage(string stageName)
    {
        var stage = await _hubConnectionService.CreateStage(stageName);
        HandleStageCreated(stage);
    }

    private async Task Vote(VoteType vote)
    {
        var voteDto = await _hubConnectionService.Vote(vote);

        var member = PlanningRoom.Members.First(x => x.Id == voteDto.MemberId);

        VotingMembers[voteDto.MemberId] = new VotingMemberModel()
            {
                Id = voteDto.Id,
                DisplayName = member.DisplayName,
                MemberType = member.MemberType,
                Vote = voteDto.VoteType
            };
    }

    private async Task ShareRoom(EventArgs e)
    {
        var baseUri = _navigationManager.BaseUri;

        var shareUri = $"{baseUri}joinroom?id={PlanningRoom.Id}";

        await _jsInterop.InvokeVoidAsync("navigator.clipboard.writeText", shareUri);

        _snackBarService.Configuration.SnackbarVariant = Variant.Text;
        _snackBarService.Configuration.ShowTransitionDuration = 500;
        _snackBarService.Configuration.HideTransitionDuration = 500;
        _snackBarService.Configuration.VisibleStateDuration = 700;

        _snackBarService.Add("Joining link copied to clipboard", Severity.Success);
    }
}