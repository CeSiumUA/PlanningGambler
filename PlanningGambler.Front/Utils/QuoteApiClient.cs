//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace QuoteApi
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IQuoteApiClient
    {
        /// <param name="category">QOD Category</param>
        /// <param name="language">Language of the QOD. The language must be supported in our QOD system.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<QuoteResponse> QodAsync(string? category, string? language);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="category">QOD Category</param>
        /// <param name="language">Language of the QOD. The language must be supported in our QOD system.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<QuoteResponse> QodAsync(string? category, string? language, System.Threading.CancellationToken cancellationToken);

        /// <param name="language">Language of the QOD category. The language must be supported in our QOD system.</param>
        /// <param name="detailed">Return detailed information of the categories. Note the data format changes between the two values of this switch.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CategoriesAsync(string? language, bool? detailed);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="language">Language of the QOD category. The language must be supported in our QOD system.</param>
        /// <param name="detailed">Return detailed information of the categories. Note the data format changes between the two values of this switch.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CategoriesAsync(string? language, bool? detailed, System.Threading.CancellationToken cancellationToken);

        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task LanguagesAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task LanguagesAsync(System.Threading.CancellationToken cancellationToken);

        /// <param name="language">Language of the Quote. The language must be supported in our system.</param>
        /// <param name="limit">No of quotes to return. The max limit depends on the subscription level.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<QuoteResponse> RandomAsync(string? language, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="language">Language of the Quote. The language must be supported in our system.</param>
        /// <param name="limit">No of quotes to return. The max limit depends on the subscription level.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<QuoteResponse> RandomAsync(string? language, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <param name="category">Quote Category</param>
        /// <param name="author">Quote Author</param>
        /// <param name="minlength">Quote minimum Length</param>
        /// <param name="maxlength">Quote maximum Length</param>
        /// <param name="query">keyword to search for in the quote</param>
        /// <param name="private">Should search private collection? Default searches public collection.</param>
        /// <param name="language">Language of the Quote. The language must be supported in our system.</param>
        /// <param name="limit">No of quotes to return. The max limit depends on the subscription level.</param>
        /// <param name="sfw">Should search only SFW (Safe For Work) quotes?</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<QuoteResponse> SearchAsync(string? category, string? author, int? minlength, int? maxlength, string? query, bool? @private, string? language, int? limit, bool? sfw);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="category">Quote Category</param>
        /// <param name="author">Quote Author</param>
        /// <param name="minlength">Quote minimum Length</param>
        /// <param name="maxlength">Quote maximum Length</param>
        /// <param name="query">keyword to search for in the quote</param>
        /// <param name="private">Should search private collection? Default searches public collection.</param>
        /// <param name="language">Language of the Quote. The language must be supported in our system.</param>
        /// <param name="limit">No of quotes to return. The max limit depends on the subscription level.</param>
        /// <param name="sfw">Should search only SFW (Safe For Work) quotes?</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<QuoteResponse> SearchAsync(string? category, string? author, int? minlength, int? maxlength, string? query, bool? @private, string? language, int? limit, bool? sfw, System.Threading.CancellationToken cancellationToken);

        /// <param name="start">Response is paged. This parameter controls where response starts the listing at</param>
        /// <param name="limit">Response is paged. This parameter controls how many is returned in the result. The maximum depends on the subscription level.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PopularAsync(int? start, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="start">Response is paged. This parameter controls where response starts the listing at</param>
        /// <param name="limit">Response is paged. This parameter controls how many is returned in the result. The maximum depends on the subscription level.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PopularAsync(int? start, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <param name="query">Text string to search for in the categories</param>
        /// <param name="start">Response is paged. This parameter controls where response starts the listing at</param>
        /// <param name="limit">Response is paged. This parameter controls how many is returned in the result. The maximum depends on the subscription level.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Search2Async(string? query, int? start, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="query">Text string to search for in the categories</param>
        /// <param name="start">Response is paged. This parameter controls where response starts the listing at</param>
        /// <param name="limit">Response is paged. This parameter controls how many is returned in the result. The maximum depends on the subscription level.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Search2Async(string? query, int? start, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <param name="language">Language. A same author may have quotes in two or more different languages. So for example 'Mahatma Gandhi' may be returned for language "en"(English), and "மஹாத்மா காந்தி" may be returned when the language is "ta" (Tamil).</param>
        /// <param name="detailed">Should return detailed author information such as `birthday`, `death date`, `occupation`, `description` etc. Only available at certain subscription levels.</param>
        /// <param name="start">Response is paged. This parameter controls where response starts the listing at</param>
        /// <param name="limit">Response is paged. This parameter controls how many is returned in the result. The maximum depends on the subscription level.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Popular2Async(string? language, bool? detailed, int? start, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="language">Language. A same author may have quotes in two or more different languages. So for example 'Mahatma Gandhi' may be returned for language "en"(English), and "மஹாத்மா காந்தி" may be returned when the language is "ta" (Tamil).</param>
        /// <param name="detailed">Should return detailed author information such as `birthday`, `death date`, `occupation`, `description` etc. Only available at certain subscription levels.</param>
        /// <param name="start">Response is paged. This parameter controls where response starts the listing at</param>
        /// <param name="limit">Response is paged. This parameter controls how many is returned in the result. The maximum depends on the subscription level.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Popular2Async(string? language, bool? detailed, int? start, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <param name="query">Text string to search for in author names</param>
        /// <param name="language">Language. A same author may have quotes in two or more different languages. So for example 'Mahatma Gandhi' may be returned for language "en"(English), and "மஹாத்மா காந்தி" may be returned when the language is "ta" (Tamil).</param>
        /// <param name="detailed">Should return detailed author information such as `birthday`, `death date`, `occupation`, `description` etc. Only available at certain subscription levels.</param>
        /// <param name="start">Response is paged. This parameter controls where response starts the listing at</param>
        /// <param name="limit">Response is paged. This parameter controls how many is returned in the result. The maximum depends on the subscription level.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Search3Async(string? query, string? language, bool? detailed, int? start, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="query">Text string to search for in author names</param>
        /// <param name="language">Language. A same author may have quotes in two or more different languages. So for example 'Mahatma Gandhi' may be returned for language "en"(English), and "மஹாத்மா காந்தி" may be returned when the language is "ta" (Tamil).</param>
        /// <param name="detailed">Should return detailed author information such as `birthday`, `death date`, `occupation`, `description` etc. Only available at certain subscription levels.</param>
        /// <param name="start">Response is paged. This parameter controls where response starts the listing at</param>
        /// <param name="limit">Response is paged. This parameter controls how many is returned in the result. The maximum depends on the subscription level.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Search3Async(string? query, string? language, bool? detailed, int? start, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <param name="quote">Quote</param>
        /// <param name="author">Quote Author</param>
        /// <param name="tags">Comma Separated tags</param>
        /// <param name="language">Language. If not supplied an auto detection mechanism will be used to detect a language.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task QuotePUTAsync(string quote, string? author, string? tags, string? language);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="quote">Quote</param>
        /// <param name="author">Quote Author</param>
        /// <param name="tags">Comma Separated tags</param>
        /// <param name="language">Language. If not supplied an auto detection mechanism will be used to detect a language.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task QuotePUTAsync(string quote, string? author, string? tags, string? language, System.Threading.CancellationToken cancellationToken);

        /// <param name="quote">Quote</param>
        /// <param name="author">Quote Author</param>
        /// <param name="tags">Comma Separated tags</param>
        /// <param name="language">Language. If not supplied an auto detection mechanism will be used to detect a language.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task QuotePOSTAsync(string quote, string? author, string? tags, string? language);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="quote">Quote</param>
        /// <param name="author">Quote Author</param>
        /// <param name="tags">Comma Separated tags</param>
        /// <param name="language">Language. If not supplied an auto detection mechanism will be used to detect a language.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task QuotePOSTAsync(string quote, string? author, string? tags, string? language, System.Threading.CancellationToken cancellationToken);

        /// <param name="id">Quote ID</param>
        /// <param name="quote">Quote</param>
        /// <param name="author">Quote Author</param>
        /// <param name="language">Language. If not supplied an auto detection mechanism will be used to detect a language.</param>
        /// <param name="tags">Comma Separated tags</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task QuotePATCHAsync(string id, string? quote, string? author, string? language, string? tags);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Quote ID</param>
        /// <param name="quote">Quote</param>
        /// <param name="author">Quote Author</param>
        /// <param name="language">Language. If not supplied an auto detection mechanism will be used to detect a language.</param>
        /// <param name="tags">Comma Separated tags</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task QuotePATCHAsync(string id, string? quote, string? author, string? language, string? tags, System.Threading.CancellationToken cancellationToken);

        /// <param name="id">Quote ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<QuoteResponse> QuoteGETAsync(string? id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Quote ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<QuoteResponse> QuoteGETAsync(string? id, System.Threading.CancellationToken cancellationToken);

        /// <param name="id">Quote ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> QuoteDELETEAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Quote ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> QuoteDELETEAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <param name="start">Response is paged. This parameter controls where response starts the listing at</param>
        /// <param name="limit">Response is paged. This parameter controls how many is returned in the result.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ListAsync(int? start, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="start">Response is paged. This parameter controls where response starts the listing at</param>
        /// <param name="limit">Response is paged. This parameter controls how many is returned in the result.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ListAsync(int? start, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <param name="id">Quote ID</param>
        /// <param name="tags">Comma Separated tags</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AddAsync(string id, string tags);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Quote ID</param>
        /// <param name="tags">Comma Separated tags</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AddAsync(string id, string tags, System.Threading.CancellationToken cancellationToken);

        /// <param name="id">Quote ID</param>
        /// <param name="tags">Comma Separated tags</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveAsync(string id, string tags);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Quote ID</param>
        /// <param name="tags">Comma Separated tags</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveAsync(string id, string tags, System.Threading.CancellationToken cancellationToken);

        /// <param name="quote_id">Quote ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task LikePUTAsync(string quote_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="quote_id">Quote ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task LikePUTAsync(string quote_id, System.Threading.CancellationToken cancellationToken);

        /// <param name="quote_id">Quote ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task LikePOSTAsync(string quote_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="quote_id">Quote ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task LikePOSTAsync(string quote_id, System.Threading.CancellationToken cancellationToken);

        /// <param name="quote_id">Quote ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task LikeDELETEAsync(string quote_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="quote_id">Quote ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task LikeDELETEAsync(string quote_id, System.Threading.CancellationToken cancellationToken);

        /// <param name="quote_id">Quote ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DislikePUTAsync(string quote_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="quote_id">Quote ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DislikePUTAsync(string quote_id, System.Threading.CancellationToken cancellationToken);

        /// <param name="quote_id">Quote ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DislikePOSTAsync(string quote_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="quote_id">Quote ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DislikePOSTAsync(string quote_id, System.Threading.CancellationToken cancellationToken);

        /// <param name="quote_id">Quote ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DislikeDELETEAsync(string quote_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="quote_id">Quote ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DislikeDELETEAsync(string quote_id, System.Threading.CancellationToken cancellationToken);

        /// <param name="title">Qshow title</param>
        /// <param name="description">Qshow description</param>
        /// <param name="tags">Tags for the qshow</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task QshowPUTAsync(string title, string? description, System.Collections.Generic.IEnumerable<string>? tags);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="title">Qshow title</param>
        /// <param name="description">Qshow description</param>
        /// <param name="tags">Tags for the qshow</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task QshowPUTAsync(string title, string? description, System.Collections.Generic.IEnumerable<string>? tags, System.Threading.CancellationToken cancellationToken);

        /// <param name="id">Qshow ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task QshowGETAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Qshow ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task QshowGETAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <param name="id">Qshow ID</param>
        /// <param name="title">Qshow title</param>
        /// <param name="description">Qshow description</param>
        /// <param name="tags">Tags for the qshow</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task QshowPATCHAsync(string id, string? title, string? description, System.Collections.Generic.IEnumerable<string>? tags);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Qshow ID</param>
        /// <param name="title">Qshow title</param>
        /// <param name="description">Qshow description</param>
        /// <param name="tags">Tags for the qshow</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task QshowPATCHAsync(string id, string? title, string? description, System.Collections.Generic.IEnumerable<string>? tags, System.Threading.CancellationToken cancellationToken);

        /// <param name="id">Qshow ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> QshowDELETEAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Qshow ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> QshowDELETEAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <param name="id">Qshow ID</param>
        /// <param name="quoteid">Quote ID to add the qshow collection</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Add2Async(string id, string quoteid);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Qshow ID</param>
        /// <param name="quoteid">Quote ID to add the qshow collection</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Add2Async(string id, string quoteid, System.Threading.CancellationToken cancellationToken);

        /// <param name="id">Qshow ID</param>
        /// <param name="quoteid">Quote ID to remove from the qshow collection</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Remove2Async(string id, string quoteid);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Qshow ID</param>
        /// <param name="quoteid">Quote ID to remove from the qshow collection</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Remove2Async(string id, string quoteid, System.Threading.CancellationToken cancellationToken);

        /// <param name="id">Qshow ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task QuotesAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Qshow ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task QuotesAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <param name="start">Response is paged. This parameter controls where response starts the listing at</param>
        /// <param name="public">Should include public qshows or not in the list</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task List2Async(int? start, bool? @public);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="start">Response is paged. This parameter controls where response starts the listing at</param>
        /// <param name="public">Should include public qshows or not in the list</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task List2Async(int? start, bool? @public, System.Threading.CancellationToken cancellationToken);

        /// <param name="quote_id">Quote id</param>
        /// <param name="bgimage_id">Background Image id ( Will override bgcolor if supplied)</param>
        /// <param name="bg_color">Background Color(if background image id is not supplied)</param>
        /// <param name="font_id">Font id</param>
        /// <param name="text_color">Text Color</param>
        /// <param name="text_size">Text/font size</param>
        /// <param name="halign">Horizontal text Alignment Value</param>
        /// <param name="valign">Vertical text Alignment Value</param>
        /// <param name="width">Image Width(By default this takes the width of the background image)</param>
        /// <param name="height">Image Height(By default this takes the height of the background image)</param>
        /// <param name="branding">Disable They Said So branding (Only available in certain subscription levels. Ignored in other levels)</param>
        /// <param name="include_transparent_layer">Should include a transparent layer between the text and the background image? This helps when the background image is bright and obscures the text.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ImagePUTAsync(string quote_id, string? bgimage_id, string? bg_color, string? font_id, string? text_color, string? text_size, string? halign, string? valign, int? width, int? height, bool? branding, bool? include_transparent_layer);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="quote_id">Quote id</param>
        /// <param name="bgimage_id">Background Image id ( Will override bgcolor if supplied)</param>
        /// <param name="bg_color">Background Color(if background image id is not supplied)</param>
        /// <param name="font_id">Font id</param>
        /// <param name="text_color">Text Color</param>
        /// <param name="text_size">Text/font size</param>
        /// <param name="halign">Horizontal text Alignment Value</param>
        /// <param name="valign">Vertical text Alignment Value</param>
        /// <param name="width">Image Width(By default this takes the width of the background image)</param>
        /// <param name="height">Image Height(By default this takes the height of the background image)</param>
        /// <param name="branding">Disable They Said So branding (Only available in certain subscription levels. Ignored in other levels)</param>
        /// <param name="include_transparent_layer">Should include a transparent layer between the text and the background image? This helps when the background image is bright and obscures the text.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ImagePUTAsync(string quote_id, string? bgimage_id, string? bg_color, string? font_id, string? text_color, string? text_size, string? halign, string? valign, int? width, int? height, bool? branding, bool? include_transparent_layer, System.Threading.CancellationToken cancellationToken);

        /// <param name="id">Quote Image id</param>
        /// <param name="binary">Should the response be a direct file download of the image or a base64 encoded image file wrapped in json?</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ImageGETAsync(string id, bool? binary);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Quote Image id</param>
        /// <param name="binary">Should the response be a direct file download of the image or a base64 encoded image file wrapped in json?</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ImageGETAsync(string id, bool? binary, System.Threading.CancellationToken cancellationToken);

        /// <param name="id">Quote Image ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> ImageDELETEAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Quote Image ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> ImageDELETEAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <param name="category">Quote Category</param>
        /// <param name="author">Quote Author</param>
        /// <param name="private">Should search private collection. Default searches public image collection.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Search4Async(string? category, string? author, bool? @private);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="category">Quote Category</param>
        /// <param name="author">Quote Author</param>
        /// <param name="private">Should search private collection. Default searches public image collection.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Search4Async(string? category, string? author, bool? @private, System.Threading.CancellationToken cancellationToken);

        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task BackgroundPOSTAsync(FileParameter image, string? tags);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task BackgroundPOSTAsync(FileParameter image, string? tags, System.Threading.CancellationToken cancellationToken);

        /// <param name="id">Font ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> BackgroundDELETEAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Font ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> BackgroundDELETEAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <param name="query">Tag string</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Search5Async(string? query);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="query">Tag string</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Search5Async(string? query, System.Threading.CancellationToken cancellationToken);

        /// <param name="start">Response is paged. This parameter determines where the response should start.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task List3Async(int? start);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="start">Response is paged. This parameter determines where the response should start.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task List3Async(int? start, System.Threading.CancellationToken cancellationToken);

        /// <param name="id">Image ID</param>
        /// <param name="tags">Comma Separated tags</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Add3Async(string id, string tags);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Image ID</param>
        /// <param name="tags">Comma Separated tags</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Add3Async(string id, string tags, System.Threading.CancellationToken cancellationToken);

        /// <param name="id">Image ID</param>
        /// <param name="tags">Comma Separated tags</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Remove3Async(string id, string tags);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Image ID</param>
        /// <param name="tags">Comma Separated tags</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Remove3Async(string id, string tags, System.Threading.CancellationToken cancellationToken);

        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task FontPOSTAsync(FileParameter font, string? tags);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task FontPOSTAsync(FileParameter font, string? tags, System.Threading.CancellationToken cancellationToken);

        /// <param name="id">Font ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> FontDELETEAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Font ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> FontDELETEAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <param name="query">Tag string</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Search6Async(string? query);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="query">Tag string</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Search6Async(string? query, System.Threading.CancellationToken cancellationToken);

        /// <param name="start">Response is paged. This parameter determines where the response should start.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task List4Async(int? start);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="start">Response is paged. This parameter determines where the response should start.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task List4Async(int? start, System.Threading.CancellationToken cancellationToken);

        /// <param name="id">Font ID</param>
        /// <param name="tags">Comma Separated tags</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Add4Async(string id, string tags);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Font ID</param>
        /// <param name="tags">Comma Separated tags</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Add4Async(string id, string tags, System.Threading.CancellationToken cancellationToken);

        /// <param name="id">Font ID</param>
        /// <param name="tags">Comma Separated tags</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Remove4Async(string id, string tags);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Font ID</param>
        /// <param name="tags">Comma Separated tags</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Remove4Async(string id, string tags, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class QuoteApiClient : IQuoteApiClient
    {
        private string _baseUrl = "https://quotes.rest";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public QuoteApiClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="category">QOD Category</param>
        /// <param name="language">Language of the QOD. The language must be supported in our QOD system.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<QuoteResponse> QodAsync(string? category, string? language)
        {
            return QodAsync(category, language, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="category">QOD Category</param>
        /// <param name="language">Language of the QOD. The language must be supported in our QOD system.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<QuoteResponse> QodAsync(string? category, string? language, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/qod?");
            if (category != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("category") + "=").Append(System.Uri.EscapeDataString(ConvertToString(category, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (language != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("language") + "=").Append(System.Uri.EscapeDataString(ConvertToString(language, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<QuoteResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new QuoteApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("400  response", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="language">Language of the QOD category. The language must be supported in our QOD system.</param>
        /// <param name="detailed">Return detailed information of the categories. Note the data format changes between the two values of this switch.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CategoriesAsync(string? language, bool? detailed)
        {
            return CategoriesAsync(language, detailed, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="language">Language of the QOD category. The language must be supported in our QOD system.</param>
        /// <param name="detailed">Return detailed information of the categories. Note the data format changes between the two values of this switch.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CategoriesAsync(string? language, bool? detailed, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/qod/categories?");
            if (language != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("language") + "=").Append(System.Uri.EscapeDataString(ConvertToString(language, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (detailed != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("detailed") + "=").Append(System.Uri.EscapeDataString(ConvertToString(detailed, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("400  response", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task LanguagesAsync()
        {
            return LanguagesAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task LanguagesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/qod/languages");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="language">Language of the Quote. The language must be supported in our system.</param>
        /// <param name="limit">No of quotes to return. The max limit depends on the subscription level.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<QuoteResponse> RandomAsync(string? language, int? limit)
        {
            return RandomAsync(language, limit, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="language">Language of the Quote. The language must be supported in our system.</param>
        /// <param name="limit">No of quotes to return. The max limit depends on the subscription level.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<QuoteResponse> RandomAsync(string? language, int? limit, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/quote/random?");
            if (language != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("language") + "=").Append(System.Uri.EscapeDataString(ConvertToString(language, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<QuoteResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new QuoteApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("401  response", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="category">Quote Category</param>
        /// <param name="author">Quote Author</param>
        /// <param name="minlength">Quote minimum Length</param>
        /// <param name="maxlength">Quote maximum Length</param>
        /// <param name="query">keyword to search for in the quote</param>
        /// <param name="private">Should search private collection? Default searches public collection.</param>
        /// <param name="language">Language of the Quote. The language must be supported in our system.</param>
        /// <param name="limit">No of quotes to return. The max limit depends on the subscription level.</param>
        /// <param name="sfw">Should search only SFW (Safe For Work) quotes?</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<QuoteResponse> SearchAsync(string? category, string? author, int? minlength, int? maxlength, string? query, bool? @private, string? language, int? limit, bool? sfw)
        {
            return SearchAsync(category, author, minlength, maxlength, query, @private, language, limit, sfw, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="category">Quote Category</param>
        /// <param name="author">Quote Author</param>
        /// <param name="minlength">Quote minimum Length</param>
        /// <param name="maxlength">Quote maximum Length</param>
        /// <param name="query">keyword to search for in the quote</param>
        /// <param name="private">Should search private collection? Default searches public collection.</param>
        /// <param name="language">Language of the Quote. The language must be supported in our system.</param>
        /// <param name="limit">No of quotes to return. The max limit depends on the subscription level.</param>
        /// <param name="sfw">Should search only SFW (Safe For Work) quotes?</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<QuoteResponse> SearchAsync(string? category, string? author, int? minlength, int? maxlength, string? query, bool? @private, string? language, int? limit, bool? sfw, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/quote/search?");
            if (category != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("category") + "=").Append(System.Uri.EscapeDataString(ConvertToString(category, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (author != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("author") + "=").Append(System.Uri.EscapeDataString(ConvertToString(author, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (minlength != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("minlength") + "=").Append(System.Uri.EscapeDataString(ConvertToString(minlength, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxlength != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxlength") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxlength, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (query != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("query") + "=").Append(System.Uri.EscapeDataString(ConvertToString(query, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (@private != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("private") + "=").Append(System.Uri.EscapeDataString(ConvertToString(@private, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (language != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("language") + "=").Append(System.Uri.EscapeDataString(ConvertToString(language, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sfw != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sfw") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sfw, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<QuoteResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new QuoteApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("401  response", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("404  response", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="start">Response is paged. This parameter controls where response starts the listing at</param>
        /// <param name="limit">Response is paged. This parameter controls how many is returned in the result. The maximum depends on the subscription level.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task PopularAsync(int? start, int? limit)
        {
            return PopularAsync(start, limit, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="start">Response is paged. This parameter controls where response starts the listing at</param>
        /// <param name="limit">Response is paged. This parameter controls how many is returned in the result. The maximum depends on the subscription level.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PopularAsync(int? start, int? limit, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/quote/categories/popular?");
            if (start != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("start") + "=").Append(System.Uri.EscapeDataString(ConvertToString(start, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="query">Text string to search for in the categories</param>
        /// <param name="start">Response is paged. This parameter controls where response starts the listing at</param>
        /// <param name="limit">Response is paged. This parameter controls how many is returned in the result. The maximum depends on the subscription level.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task Search2Async(string? query, int? start, int? limit)
        {
            return Search2Async(query, start, limit, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="query">Text string to search for in the categories</param>
        /// <param name="start">Response is paged. This parameter controls where response starts the listing at</param>
        /// <param name="limit">Response is paged. This parameter controls how many is returned in the result. The maximum depends on the subscription level.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Search2Async(string? query, int? start, int? limit, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/quote/categories/search?");
            if (query != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("query") + "=").Append(System.Uri.EscapeDataString(ConvertToString(query, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (start != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("start") + "=").Append(System.Uri.EscapeDataString(ConvertToString(start, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="language">Language. A same author may have quotes in two or more different languages. So for example 'Mahatma Gandhi' may be returned for language "en"(English), and "மஹாத்மா காந்தி" may be returned when the language is "ta" (Tamil).</param>
        /// <param name="detailed">Should return detailed author information such as `birthday`, `death date`, `occupation`, `description` etc. Only available at certain subscription levels.</param>
        /// <param name="start">Response is paged. This parameter controls where response starts the listing at</param>
        /// <param name="limit">Response is paged. This parameter controls how many is returned in the result. The maximum depends on the subscription level.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task Popular2Async(string? language, bool? detailed, int? start, int? limit)
        {
            return Popular2Async(language, detailed, start, limit, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="language">Language. A same author may have quotes in two or more different languages. So for example 'Mahatma Gandhi' may be returned for language "en"(English), and "மஹாத்மா காந்தி" may be returned when the language is "ta" (Tamil).</param>
        /// <param name="detailed">Should return detailed author information such as `birthday`, `death date`, `occupation`, `description` etc. Only available at certain subscription levels.</param>
        /// <param name="start">Response is paged. This parameter controls where response starts the listing at</param>
        /// <param name="limit">Response is paged. This parameter controls how many is returned in the result. The maximum depends on the subscription level.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Popular2Async(string? language, bool? detailed, int? start, int? limit, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/quote/authors/popular?");
            if (language != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("language") + "=").Append(System.Uri.EscapeDataString(ConvertToString(language, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (detailed != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("detailed") + "=").Append(System.Uri.EscapeDataString(ConvertToString(detailed, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (start != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("start") + "=").Append(System.Uri.EscapeDataString(ConvertToString(start, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("400  response", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="query">Text string to search for in author names</param>
        /// <param name="language">Language. A same author may have quotes in two or more different languages. So for example 'Mahatma Gandhi' may be returned for language "en"(English), and "மஹாத்மா காந்தி" may be returned when the language is "ta" (Tamil).</param>
        /// <param name="detailed">Should return detailed author information such as `birthday`, `death date`, `occupation`, `description` etc. Only available at certain subscription levels.</param>
        /// <param name="start">Response is paged. This parameter controls where response starts the listing at</param>
        /// <param name="limit">Response is paged. This parameter controls how many is returned in the result. The maximum depends on the subscription level.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task Search3Async(string? query, string? language, bool? detailed, int? start, int? limit)
        {
            return Search3Async(query, language, detailed, start, limit, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="query">Text string to search for in author names</param>
        /// <param name="language">Language. A same author may have quotes in two or more different languages. So for example 'Mahatma Gandhi' may be returned for language "en"(English), and "மஹாத்மா காந்தி" may be returned when the language is "ta" (Tamil).</param>
        /// <param name="detailed">Should return detailed author information such as `birthday`, `death date`, `occupation`, `description` etc. Only available at certain subscription levels.</param>
        /// <param name="start">Response is paged. This parameter controls where response starts the listing at</param>
        /// <param name="limit">Response is paged. This parameter controls how many is returned in the result. The maximum depends on the subscription level.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Search3Async(string? query, string? language, bool? detailed, int? start, int? limit, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/quote/authors/search?");
            if (query != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("query") + "=").Append(System.Uri.EscapeDataString(ConvertToString(query, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (language != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("language") + "=").Append(System.Uri.EscapeDataString(ConvertToString(language, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (detailed != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("detailed") + "=").Append(System.Uri.EscapeDataString(ConvertToString(detailed, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (start != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("start") + "=").Append(System.Uri.EscapeDataString(ConvertToString(start, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("400  response", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="quote">Quote</param>
        /// <param name="author">Quote Author</param>
        /// <param name="tags">Comma Separated tags</param>
        /// <param name="language">Language. If not supplied an auto detection mechanism will be used to detect a language.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task QuotePUTAsync(string quote, string? author, string? tags, string? language)
        {
            return QuotePUTAsync(quote, author, tags, language, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="quote">Quote</param>
        /// <param name="author">Quote Author</param>
        /// <param name="tags">Comma Separated tags</param>
        /// <param name="language">Language. If not supplied an auto detection mechanism will be used to detect a language.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task QuotePUTAsync(string quote, string? author, string? tags, string? language, System.Threading.CancellationToken cancellationToken)
        {
            if (quote == null)
                throw new System.ArgumentNullException("quote");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/quote?");
            urlBuilder_.Append(System.Uri.EscapeDataString("quote") + "=").Append(System.Uri.EscapeDataString(ConvertToString(quote, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (author != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("author") + "=").Append(System.Uri.EscapeDataString(ConvertToString(author, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tags != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tags") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tags, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (language != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("language") + "=").Append(System.Uri.EscapeDataString(ConvertToString(language, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("401  response", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="quote">Quote</param>
        /// <param name="author">Quote Author</param>
        /// <param name="tags">Comma Separated tags</param>
        /// <param name="language">Language. If not supplied an auto detection mechanism will be used to detect a language.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task QuotePOSTAsync(string quote, string? author, string? tags, string? language)
        {
            return QuotePOSTAsync(quote, author, tags, language, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="quote">Quote</param>
        /// <param name="author">Quote Author</param>
        /// <param name="tags">Comma Separated tags</param>
        /// <param name="language">Language. If not supplied an auto detection mechanism will be used to detect a language.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task QuotePOSTAsync(string quote, string? author, string? tags, string? language, System.Threading.CancellationToken cancellationToken)
        {
            if (quote == null)
                throw new System.ArgumentNullException("quote");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/quote?");
            urlBuilder_.Append(System.Uri.EscapeDataString("quote") + "=").Append(System.Uri.EscapeDataString(ConvertToString(quote, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (author != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("author") + "=").Append(System.Uri.EscapeDataString(ConvertToString(author, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tags != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tags") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tags, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (language != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("language") + "=").Append(System.Uri.EscapeDataString(ConvertToString(language, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("401  response", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="id">Quote ID</param>
        /// <param name="quote">Quote</param>
        /// <param name="author">Quote Author</param>
        /// <param name="language">Language. If not supplied an auto detection mechanism will be used to detect a language.</param>
        /// <param name="tags">Comma Separated tags</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task QuotePATCHAsync(string id, string? quote, string? author, string? language, string? tags)
        {
            return QuotePATCHAsync(id, quote, author, language, tags, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Quote ID</param>
        /// <param name="quote">Quote</param>
        /// <param name="author">Quote Author</param>
        /// <param name="language">Language. If not supplied an auto detection mechanism will be used to detect a language.</param>
        /// <param name="tags">Comma Separated tags</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task QuotePATCHAsync(string id, string? quote, string? author, string? language, string? tags, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/quote?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (quote != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("quote") + "=").Append(System.Uri.EscapeDataString(ConvertToString(quote, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (author != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("author") + "=").Append(System.Uri.EscapeDataString(ConvertToString(author, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (language != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("language") + "=").Append(System.Uri.EscapeDataString(ConvertToString(language, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tags != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tags") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tags, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("401  response", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="id">Quote ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<QuoteResponse> QuoteGETAsync(string? id)
        {
            return QuoteGETAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Quote ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<QuoteResponse> QuoteGETAsync(string? id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/quote?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<QuoteResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new QuoteApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("401  response", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="id">Quote ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FileResponse> QuoteDELETEAsync(string id)
        {
            return QuoteDELETEAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Quote ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> QuoteDELETEAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/quote?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/xml"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            return default(FileResponse)!;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("401  response", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("404  response", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="start">Response is paged. This parameter controls where response starts the listing at</param>
        /// <param name="limit">Response is paged. This parameter controls how many is returned in the result.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ListAsync(int? start, int? limit)
        {
            return ListAsync(start, limit, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="start">Response is paged. This parameter controls where response starts the listing at</param>
        /// <param name="limit">Response is paged. This parameter controls how many is returned in the result.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ListAsync(int? start, int? limit, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/quote/list?");
            if (start != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("start") + "=").Append(System.Uri.EscapeDataString(ConvertToString(start, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("401  response", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="id">Quote ID</param>
        /// <param name="tags">Comma Separated tags</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AddAsync(string id, string tags)
        {
            return AddAsync(id, tags, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Quote ID</param>
        /// <param name="tags">Comma Separated tags</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AddAsync(string id, string tags, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (tags == null)
                throw new System.ArgumentNullException("tags");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/quote/tags/add?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("tags") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tags, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("401  response", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("404  response", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="id">Quote ID</param>
        /// <param name="tags">Comma Separated tags</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task RemoveAsync(string id, string tags)
        {
            return RemoveAsync(id, tags, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Quote ID</param>
        /// <param name="tags">Comma Separated tags</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task RemoveAsync(string id, string tags, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (tags == null)
                throw new System.ArgumentNullException("tags");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/quote/tags/remove?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("tags") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tags, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("401  response", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("404  response", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="quote_id">Quote ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task LikePUTAsync(string quote_id)
        {
            return LikePUTAsync(quote_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="quote_id">Quote ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task LikePUTAsync(string quote_id, System.Threading.CancellationToken cancellationToken)
        {
            if (quote_id == null)
                throw new System.ArgumentNullException("quote_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/quote/like?");
            urlBuilder_.Append(System.Uri.EscapeDataString("quote_id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(quote_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("401  response", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("404  response", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="quote_id">Quote ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task LikePOSTAsync(string quote_id)
        {
            return LikePOSTAsync(quote_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="quote_id">Quote ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task LikePOSTAsync(string quote_id, System.Threading.CancellationToken cancellationToken)
        {
            if (quote_id == null)
                throw new System.ArgumentNullException("quote_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/quote/like?");
            urlBuilder_.Append(System.Uri.EscapeDataString("quote_id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(quote_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("401  response", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("404  response", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="quote_id">Quote ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task LikeDELETEAsync(string quote_id)
        {
            return LikeDELETEAsync(quote_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="quote_id">Quote ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task LikeDELETEAsync(string quote_id, System.Threading.CancellationToken cancellationToken)
        {
            if (quote_id == null)
                throw new System.ArgumentNullException("quote_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/quote/like?");
            urlBuilder_.Append(System.Uri.EscapeDataString("quote_id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(quote_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("401  response", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("404  response", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="quote_id">Quote ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DislikePUTAsync(string quote_id)
        {
            return DislikePUTAsync(quote_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="quote_id">Quote ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DislikePUTAsync(string quote_id, System.Threading.CancellationToken cancellationToken)
        {
            if (quote_id == null)
                throw new System.ArgumentNullException("quote_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/quote/dislike?");
            urlBuilder_.Append(System.Uri.EscapeDataString("quote_id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(quote_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("401  response", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("404  response", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="quote_id">Quote ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DislikePOSTAsync(string quote_id)
        {
            return DislikePOSTAsync(quote_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="quote_id">Quote ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DislikePOSTAsync(string quote_id, System.Threading.CancellationToken cancellationToken)
        {
            if (quote_id == null)
                throw new System.ArgumentNullException("quote_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/quote/dislike?");
            urlBuilder_.Append(System.Uri.EscapeDataString("quote_id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(quote_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("401  response", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("404  response", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="quote_id">Quote ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DislikeDELETEAsync(string quote_id)
        {
            return DislikeDELETEAsync(quote_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="quote_id">Quote ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DislikeDELETEAsync(string quote_id, System.Threading.CancellationToken cancellationToken)
        {
            if (quote_id == null)
                throw new System.ArgumentNullException("quote_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/quote/dislike?");
            urlBuilder_.Append(System.Uri.EscapeDataString("quote_id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(quote_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("401  response", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("404  response", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="title">Qshow title</param>
        /// <param name="description">Qshow description</param>
        /// <param name="tags">Tags for the qshow</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task QshowPUTAsync(string title, string? description, System.Collections.Generic.IEnumerable<string>? tags)
        {
            return QshowPUTAsync(title, description, tags, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="title">Qshow title</param>
        /// <param name="description">Qshow description</param>
        /// <param name="tags">Tags for the qshow</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task QshowPUTAsync(string title, string? description, System.Collections.Generic.IEnumerable<string>? tags, System.Threading.CancellationToken cancellationToken)
        {
            if (title == null)
                throw new System.ArgumentNullException("title");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/qshow?");
            urlBuilder_.Append(System.Uri.EscapeDataString("title") + "=").Append(System.Uri.EscapeDataString(ConvertToString(title, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (description != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("description") + "=").Append(System.Uri.EscapeDataString(ConvertToString(description, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tags != null)
            {
                foreach (var item_ in tags) { urlBuilder_.Append(System.Uri.EscapeDataString("tags") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("401  response", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="id">Qshow ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task QshowGETAsync(string id)
        {
            return QshowGETAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Qshow ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task QshowGETAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/qshow?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/xml"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("401  response", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("404  response", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="id">Qshow ID</param>
        /// <param name="title">Qshow title</param>
        /// <param name="description">Qshow description</param>
        /// <param name="tags">Tags for the qshow</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task QshowPATCHAsync(string id, string? title, string? description, System.Collections.Generic.IEnumerable<string>? tags)
        {
            return QshowPATCHAsync(id, title, description, tags, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Qshow ID</param>
        /// <param name="title">Qshow title</param>
        /// <param name="description">Qshow description</param>
        /// <param name="tags">Tags for the qshow</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task QshowPATCHAsync(string id, string? title, string? description, System.Collections.Generic.IEnumerable<string>? tags, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/qshow?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (title != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("title") + "=").Append(System.Uri.EscapeDataString(ConvertToString(title, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (description != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("description") + "=").Append(System.Uri.EscapeDataString(ConvertToString(description, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tags != null)
            {
                foreach (var item_ in tags) { urlBuilder_.Append(System.Uri.EscapeDataString("tags") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("401  response", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("404  response", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="id">Qshow ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FileResponse> QshowDELETEAsync(string id)
        {
            return QshowDELETEAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Qshow ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> QshowDELETEAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/qshow?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/xml"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            return default(FileResponse)!;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("401  response", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("404  response", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="id">Qshow ID</param>
        /// <param name="quoteid">Quote ID to add the qshow collection</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task Add2Async(string id, string quoteid)
        {
            return Add2Async(id, quoteid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Qshow ID</param>
        /// <param name="quoteid">Quote ID to add the qshow collection</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Add2Async(string id, string quoteid, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (quoteid == null)
                throw new System.ArgumentNullException("quoteid");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/qshow/quotes/add?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("quoteid") + "=").Append(System.Uri.EscapeDataString(ConvertToString(quoteid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("401  response", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("404  response", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="id">Qshow ID</param>
        /// <param name="quoteid">Quote ID to remove from the qshow collection</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task Remove2Async(string id, string quoteid)
        {
            return Remove2Async(id, quoteid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Qshow ID</param>
        /// <param name="quoteid">Quote ID to remove from the qshow collection</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Remove2Async(string id, string quoteid, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (quoteid == null)
                throw new System.ArgumentNullException("quoteid");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/qshow/quotes/remove?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("quoteid") + "=").Append(System.Uri.EscapeDataString(ConvertToString(quoteid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("401  response", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("404  response", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="id">Qshow ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task QuotesAsync(string id)
        {
            return QuotesAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Qshow ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task QuotesAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/qshow/quotes?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("401  response", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("404  response", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="start">Response is paged. This parameter controls where response starts the listing at</param>
        /// <param name="public">Should include public qshows or not in the list</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task List2Async(int? start, bool? @public)
        {
            return List2Async(start, @public, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="start">Response is paged. This parameter controls where response starts the listing at</param>
        /// <param name="public">Should include public qshows or not in the list</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task List2Async(int? start, bool? @public, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/qshow/list?");
            if (start != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("start") + "=").Append(System.Uri.EscapeDataString(ConvertToString(start, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (@public != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("public") + "=").Append(System.Uri.EscapeDataString(ConvertToString(@public, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("401  response", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="quote_id">Quote id</param>
        /// <param name="bgimage_id">Background Image id ( Will override bgcolor if supplied)</param>
        /// <param name="bg_color">Background Color(if background image id is not supplied)</param>
        /// <param name="font_id">Font id</param>
        /// <param name="text_color">Text Color</param>
        /// <param name="text_size">Text/font size</param>
        /// <param name="halign">Horizontal text Alignment Value</param>
        /// <param name="valign">Vertical text Alignment Value</param>
        /// <param name="width">Image Width(By default this takes the width of the background image)</param>
        /// <param name="height">Image Height(By default this takes the height of the background image)</param>
        /// <param name="branding">Disable They Said So branding (Only available in certain subscription levels. Ignored in other levels)</param>
        /// <param name="include_transparent_layer">Should include a transparent layer between the text and the background image? This helps when the background image is bright and obscures the text.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ImagePUTAsync(string quote_id, string? bgimage_id, string? bg_color, string? font_id, string? text_color, string? text_size, string? halign, string? valign, int? width, int? height, bool? branding, bool? include_transparent_layer)
        {
            return ImagePUTAsync(quote_id, bgimage_id, bg_color, font_id, text_color, text_size, halign, valign, width, height, branding, include_transparent_layer, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="quote_id">Quote id</param>
        /// <param name="bgimage_id">Background Image id ( Will override bgcolor if supplied)</param>
        /// <param name="bg_color">Background Color(if background image id is not supplied)</param>
        /// <param name="font_id">Font id</param>
        /// <param name="text_color">Text Color</param>
        /// <param name="text_size">Text/font size</param>
        /// <param name="halign">Horizontal text Alignment Value</param>
        /// <param name="valign">Vertical text Alignment Value</param>
        /// <param name="width">Image Width(By default this takes the width of the background image)</param>
        /// <param name="height">Image Height(By default this takes the height of the background image)</param>
        /// <param name="branding">Disable They Said So branding (Only available in certain subscription levels. Ignored in other levels)</param>
        /// <param name="include_transparent_layer">Should include a transparent layer between the text and the background image? This helps when the background image is bright and obscures the text.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ImagePUTAsync(string quote_id, string? bgimage_id, string? bg_color, string? font_id, string? text_color, string? text_size, string? halign, string? valign, int? width, int? height, bool? branding, bool? include_transparent_layer, System.Threading.CancellationToken cancellationToken)
        {
            if (quote_id == null)
                throw new System.ArgumentNullException("quote_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/quote/image?");
            urlBuilder_.Append(System.Uri.EscapeDataString("quote_id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(quote_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (bgimage_id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("bgimage_id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bgimage_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bg_color != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("bg_color") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bg_color, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (font_id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("font_id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(font_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (text_color != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("text_color") + "=").Append(System.Uri.EscapeDataString(ConvertToString(text_color, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (text_size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("text_size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(text_size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (halign != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("halign") + "=").Append(System.Uri.EscapeDataString(ConvertToString(halign, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (valign != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("valign") + "=").Append(System.Uri.EscapeDataString(ConvertToString(valign, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (width != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("width") + "=").Append(System.Uri.EscapeDataString(ConvertToString(width, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (height != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("height") + "=").Append(System.Uri.EscapeDataString(ConvertToString(height, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (branding != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("branding") + "=").Append(System.Uri.EscapeDataString(ConvertToString(branding, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (include_transparent_layer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("include_transparent_layer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(include_transparent_layer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("401  response", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("404  response", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="id">Quote Image id</param>
        /// <param name="binary">Should the response be a direct file download of the image or a base64 encoded image file wrapped in json?</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ImageGETAsync(string id, bool? binary)
        {
            return ImageGETAsync(id, binary, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Quote Image id</param>
        /// <param name="binary">Should the response be a direct file download of the image or a base64 encoded image file wrapped in json?</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ImageGETAsync(string id, bool? binary, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/quote/image?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (binary != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("binary") + "=").Append(System.Uri.EscapeDataString(ConvertToString(binary, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("401  response", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("404  response", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="id">Quote Image ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FileResponse> ImageDELETEAsync(string id)
        {
            return ImageDELETEAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Quote Image ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> ImageDELETEAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/quote/image?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/xml"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            return default(FileResponse)!;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("401  response", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("404  response", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="category">Quote Category</param>
        /// <param name="author">Quote Author</param>
        /// <param name="private">Should search private collection. Default searches public image collection.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task Search4Async(string? category, string? author, bool? @private)
        {
            return Search4Async(category, author, @private, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="category">Quote Category</param>
        /// <param name="author">Quote Author</param>
        /// <param name="private">Should search private collection. Default searches public image collection.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Search4Async(string? category, string? author, bool? @private, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/quote/image/search?");
            if (category != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("category") + "=").Append(System.Uri.EscapeDataString(ConvertToString(category, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (author != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("author") + "=").Append(System.Uri.EscapeDataString(ConvertToString(author, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (@private != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("private") + "=").Append(System.Uri.EscapeDataString(ConvertToString(@private, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("401  response", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("404  response", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task BackgroundPOSTAsync(FileParameter image, string? tags)
        {
            return BackgroundPOSTAsync(image, tags, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task BackgroundPOSTAsync(FileParameter image, string? tags, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/quote/image/background");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (image == null)
                        throw new System.ArgumentNullException("image");
                    else
                    {
                        var content_image_ = new System.Net.Http.StreamContent(image.Data);
                        if (!string.IsNullOrEmpty(image.ContentType))
                            content_image_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(image.ContentType);
                        content_.Add(content_image_, "image", image.FileName ?? "image");
                    }

                    if (tags == null)
                        throw new System.ArgumentNullException("tags");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(tags, System.Globalization.CultureInfo.InvariantCulture)), "tags");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("401  response", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="id">Font ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FileResponse> BackgroundDELETEAsync(string id)
        {
            return BackgroundDELETEAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Font ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> BackgroundDELETEAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/quote/image/background?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/xml"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            return default(FileResponse)!;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("401  response", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("404  response", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="query">Tag string</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task Search5Async(string? query)
        {
            return Search5Async(query, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="query">Tag string</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Search5Async(string? query, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/quote/image/background/search?");
            if (query != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("query") + "=").Append(System.Uri.EscapeDataString(ConvertToString(query, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("401  response", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("404  response", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="start">Response is paged. This parameter determines where the response should start.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task List3Async(int? start)
        {
            return List3Async(start, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="start">Response is paged. This parameter determines where the response should start.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task List3Async(int? start, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/quote/image/background/list?");
            if (start != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("start") + "=").Append(System.Uri.EscapeDataString(ConvertToString(start, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("401  response", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("404  response", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="id">Image ID</param>
        /// <param name="tags">Comma Separated tags</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task Add3Async(string id, string tags)
        {
            return Add3Async(id, tags, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Image ID</param>
        /// <param name="tags">Comma Separated tags</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Add3Async(string id, string tags, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (tags == null)
                throw new System.ArgumentNullException("tags");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/quote/image/background/tags/add?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("tags") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tags, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("401  response", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("404  response", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="id">Image ID</param>
        /// <param name="tags">Comma Separated tags</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task Remove3Async(string id, string tags)
        {
            return Remove3Async(id, tags, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Image ID</param>
        /// <param name="tags">Comma Separated tags</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Remove3Async(string id, string tags, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (tags == null)
                throw new System.ArgumentNullException("tags");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/quote/image/background/tags/remove?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("tags") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tags, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("401  response", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("404  response", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task FontPOSTAsync(FileParameter font, string? tags)
        {
            return FontPOSTAsync(font, tags, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task FontPOSTAsync(FileParameter font, string? tags, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/quote/image/font");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (font == null)
                        throw new System.ArgumentNullException("font");
                    else
                    {
                        var content_font_ = new System.Net.Http.StreamContent(font.Data);
                        if (!string.IsNullOrEmpty(font.ContentType))
                            content_font_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(font.ContentType);
                        content_.Add(content_font_, "font", font.FileName ?? "font");
                    }

                    if (tags == null)
                        throw new System.ArgumentNullException("tags");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(tags, System.Globalization.CultureInfo.InvariantCulture)), "tags");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("401  response", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="id">Font ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FileResponse> FontDELETEAsync(string id)
        {
            return FontDELETEAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Font ID</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> FontDELETEAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/quote/image/font?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/xml"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            return default(FileResponse)!;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("401  response", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("404  response", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="query">Tag string</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task Search6Async(string? query)
        {
            return Search6Async(query, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="query">Tag string</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Search6Async(string? query, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/quote/image/font/search?");
            if (query != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("query") + "=").Append(System.Uri.EscapeDataString(ConvertToString(query, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("401  response", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("404  response", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="start">Response is paged. This parameter determines where the response should start.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task List4Async(int? start)
        {
            return List4Async(start, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="start">Response is paged. This parameter determines where the response should start.</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task List4Async(int? start, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/quote/image/font/list?");
            if (start != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("start") + "=").Append(System.Uri.EscapeDataString(ConvertToString(start, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("401  response", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("404  response", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="id">Font ID</param>
        /// <param name="tags">Comma Separated tags</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task Add4Async(string id, string tags)
        {
            return Add4Async(id, tags, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Font ID</param>
        /// <param name="tags">Comma Separated tags</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Add4Async(string id, string tags, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (tags == null)
                throw new System.ArgumentNullException("tags");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/quote/image/font/tags/add?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("tags") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tags, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("401  response", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("404  response", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="id">Font ID</param>
        /// <param name="tags">Comma Separated tags</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task Remove4Async(string id, string tags)
        {
            return Remove4Async(id, tags, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Font ID</param>
        /// <param name="tags">Comma Separated tags</param>
        /// <returns>200  response</returns>
        /// <exception cref="QuoteApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Remove4Async(string id, string tags, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (tags == null)
                throw new System.ArgumentNullException("tags");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/quote/image/font/tags/remove?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("tags") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tags, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("401  response", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("404  response", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new QuoteApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new QuoteApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new QuoteApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class QuoteResponse
    {
        /// <summary>
        /// Metadata about this successful call
        /// </summary>
        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Success { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("contents", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contents? Contents { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class QOD : Quote
    {
        /// <summary>
        /// Date this quote of the day belongs to
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Date { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Quote : NewQuote
    {
        /// <summary>
        /// Unique identifier representing a specific quote in theysaidso.com.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// Image URL that can be used for background to display this quote.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("image", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Image { get; set; } = default!;

        /// <summary>
        /// Length of the quote string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Length { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NewQuote
    {
        /// <summary>
        /// Author name of quote.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Author { get; set; } = default!;

        /// <summary>
        /// The Quote.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quote", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Quote { get; set; } = default!;

        /// <summary>
        /// Array of tags/categories.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Tags { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Contents
    {
        /// <summary>
        /// List of quotes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quotes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Quote>? Quotes { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileParameter
    {
        public FileParameter(System.IO.Stream data)
            : this(data, null, null)
        {
        }

        public FileParameter(System.IO.Stream data, string? fileName)
            : this(data, fileName, null)
        {
        }

        public FileParameter(System.IO.Stream data, string? fileName, string? contentType)
        {
            Data = data;
            FileName = fileName;
            ContentType = contentType;
        }

        public System.IO.Stream Data { get; private set; }

        public string? FileName { get; private set; }

        public string? ContentType { get; private set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable? _client;
        private System.IDisposable? _response;

        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable? client, System.IDisposable? response)
        {
            StatusCode = statusCode;
            Headers = headers;
            Stream = stream;
            _client = client;
            _response = response;
        }

        public void Dispose()
        {
            Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }


    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class QuoteApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string? Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public QuoteApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception? innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class QuoteApiException<TResult> : QuoteApiException
    {
        public TResult Result { get; private set; }

        public QuoteApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception? innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108
#pragma warning restore 3016
#pragma warning restore 8603