@inject NavigationManager _navigationManager
@inject IRoomConnectionProvider _roomConnectionProvider
@inject IMatDialogService _matDialogService
@inject ILocalStorageService _localStorageService
@inject HubConnectionService _hubConnectionService
@inject IJSRuntime _jsRuntime
@inject ILogger<Room> logger
@inject IQuoteProvider _quoteProvider
@page "/room"
@using PlanningGambler.Front.Services.Abstract
@using PlanningGambler.Front.Services.Concrete
@using PlanningGambler.Shared.Dtos
@using PlanningGambler.Shared.Dtos.Results
@using PlanningGambler.Shared.Models
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.WebUtilities
@using PlanningGambler.Front.Pages.Dialogs

<PageTitle>Planning Room</PageTitle>
<MatFAB style="position: fixed; left: 50px; bottom: 50px; z-index: 2;" RefBack="menuRef" OnClick="OpenVoteMenu" Icon="@MatIconNames.Poll"></MatFAB>
<MatFAB style="position: fixed; left: 130px; bottom: 50px; z-index: 2;" RefBack="menuRef" OnClick="OpenShareDialog" Icon="@MatIconNames.Share"></MatFAB>
<MatMenu @ref="VoteMenu" TargetForwardRef="@menuRef">
    <MatList>
        @foreach (var voteOption in VoteOption.VoteOptions)
        {
            <MatListItem OnClick="@(_ => Vote(voteOption))">@voteOption</MatListItem>
        }
        <MatListItem style="color: red" OnClick="CloseVoteMenu">Close</MatListItem>
    </MatList>
</MatMenu>

@if (_roomToken != null && _roomToken!.MemberType == MemberType.Administrator)
{
    <MatFAB style="position: fixed; right: 130px; bottom: 50px; z-index: 2;" OnClick="StartCountDown" Icon="@MatIconNames.Play_arrow"></MatFAB>
}
@if (_currentCountDown.HasValue)
{
    <div style="font-size: 600px; position: absolute; z-index: 2; opacity: 0.5; text-align: center; height: 100%; right: 0%; left: 0%">
        @_currentCountDown.Value
        <p style="font-size: 24px;left: 0%;right: 0%;position: fixed;bottom: 10%;">@_quoteOfTeDay</p>
    </div>
}
@if (!string.IsNullOrEmpty(_snackBarMessage))
{
    <MatSnackbar @bind-IsOpen="_snackBarOpen">
        <MatSnackbarContent>@_snackBarMessage</MatSnackbarContent>
        <MatSnackbarActions>
            <MatButton OnClick="CloseSnackBar" Raised="true">Ok</MatButton>
        </MatSnackbarActions>
    </MatSnackbar>
}

@if (_roomInfo != null)
{
    <div style="width: 90%; position: absolute; left: 0">
        @foreach (var participant in _participants)
        {
            <MatCard style="width: 200px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; display: inline-block">
                <MatCardContent style="padding: 1rem;">
                    <MatCardMedia Wide="true" style="font-size: 70px; text-align: center">
                        @if (_hiddenResults.Contains(participant.Id))
                        {
                            @("?")
                        }
                        else
                        {
                            @GetVotingValue(_voteResults.FirstOrDefault(x => x.UserId == participant.Id)?.Vote)
                            ;
                        }
                    </MatCardMedia>
                    <MatHeadline6>@participant.DisplayName</MatHeadline6>
                </MatCardContent>
            </MatCard>
        }
    </div>
    <div style="width: 10%; position: fixed; right: 0">
        <MatList style="width: 100%">
            @foreach (var stage in _roomInfo!.Stages)
            {
                <MatListItem>
                    <MatListItemText>
                        @if (_roomInfo.CurrentStage != null && stage.Id == _roomInfo!.CurrentStage!.Id)
                        {
                            @if (!string.IsNullOrEmpty(_roomInfo.JiraAddress))
                            {
                                <MatListItemPrimaryText style="color: green">
                                    @stage.Title
                                    <MatIconButton Link="@GetTicketLink(stage)" Target="_blank">
                                        <MatIcon>@MatIconNames.Link</MatIcon>
                                    </MatIconButton>
                                </MatListItemPrimaryText>
                            }
                            else
                            {
                                <MatListItemPrimaryText style="color: green">@stage.Title</MatListItemPrimaryText>
                            }
                            <MatListItemSecondaryText style="color: green">Current stage</MatListItemSecondaryText>
                        }
                        else
                        {
                            @if (!string.IsNullOrEmpty(_roomInfo.JiraAddress))
                            {
                                <MatListItemPrimaryText>
                                    @stage.Title
                                    @if (_roomToken!.MemberType == MemberType.Administrator)
                                    {
                                        <MatIconButton OnClick="() => SelectCurrentStage(stage.Id)">
                                            <MatIcon>@MatIconNames.Check</MatIcon>
                                        </MatIconButton>
                                    }
                                    <MatIconButton Link="@GetTicketLink(stage)" Target="_blank">
                                        <MatIcon>@MatIconNames.Link</MatIcon>
                                    </MatIconButton>
                                </MatListItemPrimaryText>
                            }
                            else
                            {
                                <MatListItemPrimaryText>
                                    @stage.Title
                                    <MatIconButton OnClick="() => SelectCurrentStage(stage.Id)">
                                        <MatIcon>@MatIconNames.Check</MatIcon>
                                    </MatIconButton>
                                </MatListItemPrimaryText>
                            }
                        }
                    </MatListItemText>
                </MatListItem>
            }
        </MatList>
        @if (_roomToken!.MemberType == MemberType.Administrator)
        {
            <MatButton OnClick="CreateStage" Icon="@MatIconNames.Add"></MatButton>
        }
        @if (_average.HasValue && _mostRecent.HasValue)
        {
            <p>Average: @Math.Round(_average.Value, 2)</p>
            <p>Most votes: @_mostRecent</p>
        }
    </div>
}

@code {

    [Parameter]
    public string? RoomId { get; set; }

    [Parameter]
    public string? RoomPassword { get; set; }

    public MatMenu? VoteMenu;

    private RoomToken? _roomToken;
    private RoomDto? _roomInfo;

    readonly ForwardRef menuRef = new();

    private decimal? _average;
    private int? _mostRecent;

    #region SnackBar

    private bool _snackBarOpen;

    private string? _snackBarMessage;

        private const string SnackBarMessageFormat = "Client {0} has been {1}";

    #endregion

    private int? _currentCountDown;

    private List<ParticipantDto> _participants = new();
    private List<VotingResult> _voteResults = new();
    private readonly HashSet<Guid> _hiddenResults = new();

    private string? _quoteOfTeDay = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _roomToken = await _localStorageService.GetItemAsync<RoomToken?>("auth_token");
        var uri = _navigationManager.ToAbsoluteUri(_navigationManager.Uri);

        _quoteOfTeDay = await _quoteProvider.GetQuoteOfTheDay();

        var parsedQuery = QueryHelpers.ParseNullableQuery(uri.Query);

        if (parsedQuery != null)
        {
            if (parsedQuery.TryGetValue("id", out var id))
            {
                RoomId = id.First();
            }

            if (parsedQuery.TryGetValue("password", out var password))
            {
                RoomPassword = password.First();
            }

            if ((_roomToken == null || !await _roomConnectionProvider.Verify(_roomToken.Token)) && RoomId != null)
            {
                var displayName = await _matDialogService.OpenAsync(typeof(JoinRoomLinkDialog), new MatDialogOptions()) as string;
                if (!string.IsNullOrEmpty(displayName))
                {
                    _roomToken = await _roomConnectionProvider.JoinRoom(Guid.Parse(RoomId), displayName, RoomPassword);
                    await _localStorageService.SetItemAsync("auth_token", _roomToken);
                }
                else
                {
                    _navigationManager.NavigateTo("/");
                    return;
                }
            }
        }

        if (_roomToken == null)
        {
            _navigationManager.NavigateTo("/");
            return;
        }
        var verified = await _roomConnectionProvider.Verify(_roomToken.Token);
        if (!verified)
        {
            _navigationManager.NavigateTo("/");
            return;
        }
        await _hubConnectionService.StartConnection(_roomToken!.Token);
        SubscribeToMessages();
        _roomInfo = await _hubConnectionService.FetchRoom();
        _participants = _roomInfo!.Participants.Select(x => new ParticipantDto(x.Id, x.DisplayName, x.MemberType)).ToList();
        await base.OnInitializedAsync();
    }

    private string GetVotingValue(string? rawVote)
    {
        if (string.IsNullOrEmpty(rawVote))
        {
            return string.Empty;
        }
        if (rawVote == VoteOption.VoteOptions.Last())
        {
            return "🤷‍♂️";
        }
        return rawVote;
    }

    private async Task CreateStage()
    {
        var newStageName = await _matDialogService.PromptAsync("New stage name:");
        if (!string.IsNullOrEmpty(newStageName?.Trim()) && _roomToken!.MemberType == MemberType.Administrator)
        {
            await _hubConnectionService.CreateStage(newStageName);
        }
    }

    private async Task SelectCurrentStage(Guid stageId)
    {
        await _hubConnectionService.SelectStage(stageId);
    }

    private async Task StartCountDown()
    {
        await _hubConnectionService.StartCountDown();
    }

    private async Task Vote(string vote)
    {
        try
        {
            await _hubConnectionService.Vote(vote);
            logger.LogInformation("Vote sent!");
        }
        catch
        {
            await _matDialogService.AlertAsync("Can not vote! Please, try selecting a stage to vote for, or try again later");
            logger.LogError("Vote error");
        }
    }

    private void SubscribeToMessages()
    {
        logger.LogInformation("Subscribing...");
        _hubConnectionService.OnParticipantConnected += (sender, dto) =>
        {
            logger.LogInformation("Client connected, participants: {0}", string.Join(", ", dto.Participants.Select(x => x.DisplayName)));
            _participants = dto.Participants.ToList();
            _snackBarMessage = string.Format(SnackBarMessageFormat, dto.AffectedParticipant.DisplayName, "connected");
            _snackBarOpen = true;
            logger.LogInformation("Current participants: {0}", string.Join(", ", _participants.Select(x => x.DisplayName)));
            StateHasChanged();
        };
        _hubConnectionService.OnParticipantDisconnected += (sender, dto) =>
        {
            logger.LogInformation("Client disconnected, participants: {0}", string.Join(", ", dto.Participants.Select(x => x.DisplayName)));
            _participants = dto.Participants.ToList();
            _snackBarMessage = string.Format(SnackBarMessageFormat, dto.AffectedParticipant.DisplayName, "disconnected");
            _snackBarOpen = true;
            logger.LogInformation("Current participants: {0}", string.Join(", ", _participants.Select(x => x.DisplayName)));
            StateHasChanged();
        };
        _hubConnectionService.OnStageCreated += (sender, result) =>
        {
            if (result != null)
            {
                _roomInfo!.Stages.Add(new NewStageResult(result.Id, result.Title, result.Deadline));
                StateHasChanged();
            }
        };
        _hubConnectionService.OnStageSelected += (sender, guid) =>
        {
            _roomInfo!.CurrentStage = _roomInfo!.Stages.First(x => x.Id == guid);
            _voteResults = new List<VotingResult>();
            _average = null;
            _mostRecent = null;
            StateHasChanged();
        };
        _hubConnectionService.OnCountDown += (sender, i) =>
        {
            _currentCountDown = i;
            StateHasChanged();
        };
        _hubConnectionService.OnStageVotingResult += (sender, results) =>
        {
            _currentCountDown = null;
            _hiddenResults.Clear();
            if (results != null)
            {
                logger.LogInformation("Got vote results: {Results}", string.Join(", ", results.Select(x => x.Vote)));
                _voteResults = results.ToList();
                var numericResults = _voteResults.Select(x => x.Vote)
                    .Where(x => x.All(char.IsDigit)).Select(x => decimal.Parse(x)).ToList();
                _average = numericResults!.Average();
                var votesGrouping = numericResults!.GroupBy(x => x).ToList();
                var maxVotes = votesGrouping.Max(x => x.Count());
                _mostRecent = (int) (votesGrouping.FirstOrDefault(x => x.Count() == maxVotes)?.Key ?? 0);
            }
            logger.LogInformation("Changed results");
            StateHasChanged();
        };
        _hubConnectionService.OnParticipantVoted += (sender, result) =>
        {
            if (result != null)
            {
                _hiddenResults.Add(result.UserId);
            }
            StateHasChanged();
        };
    }

    private async Task OpenVoteMenu()
    {
        if (VoteMenu != null)
        {
            await VoteMenu.OpenAsync();
        }
    }

    private async Task OpenShareDialog()
    {
        await _matDialogService.AlertAsync(new Uri($"{_navigationManager.BaseUri}room?id={_roomToken!.RoomId}").AbsoluteUri);
    }

    private async Task CloseVoteMenu()
    {
        if (VoteMenu != null)
        {
            await VoteMenu.CloseAsync();
        }
    }

    private void CloseSnackBar()
    {
        _snackBarOpen = false;
        StateHasChanged();
    }

    private string GetTicketLink(NewStageResult stage)
    {
        var uri = new Uri($"{_roomInfo!.JiraAddress}/browse/{stage.Title}");
        return uri.ToString();
    }

}