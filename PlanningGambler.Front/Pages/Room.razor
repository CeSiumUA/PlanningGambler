@inject NavigationManager _navigationManager
@inject IRoomConnectionProvider _roomConnectionProvider
@inject IMatDialogService _matDialogService
@inject ILocalStorageService _localStorageService
@inject HubConnectionService _hubConnectionService
@inject IJSRuntime _jsRuntime
@inject ILogger<Room> logger
@inject IQuoteApiClient _quoteApiClient
@page "/room"
@using Microsoft.AspNetCore.WebUtilities
@using PlanningGambler.Front.Services.Abstract
@using Blazored.LocalStorage
@using PlanningGambler.Dtos.Results
@using PlanningGambler.Front.Services.Concrete
@using PlanningGambler.Shared.Dtos
@using PlanningGambler.Shared.Dtos.Results
@using PlanningGambler.Shared.Models
@using PlanningGambler.Shared.Models.Rooms
@using System.Runtime.CompilerServices
@using QuoteApi

<PageTitle>Planning Room</PageTitle>
<MatFAB style="position: fixed; left: 50px; bottom: 50px; z-index: 2;" RefBack="menuRef" OnClick="OpenVoteMenu" Icon="@MatIconNames.Poll"></MatFAB>
<MatFAB style="position: fixed; left: 130px; bottom: 50px; z-index: 2;" RefBack="menuRef" OnClick="OpenShareDialog" Icon="@MatIconNames.Share"></MatFAB>
<MatMenu @ref="VoteMenu" TargetForwardRef="@menuRef">
    <MatList>
        @foreach (var voteOption in VoteOption.VoteOptions)
        {
            <MatListItem OnClick="@(_ => Vote(voteOption))">@voteOption</MatListItem>
        }
        <MatListItem style="color: red" OnClick="CloseVoteMenu">Close</MatListItem>
    </MatList>
</MatMenu>

@if (_roomToken != null && _roomToken!.MemberType == MemberType.Administrator)
{
    <MatFAB style="position: fixed; right: 130px; bottom: 50px; z-index: 2;" OnClick="StartCountDown" Icon="@MatIconNames.Play_arrow"></MatFAB>
}
@if (_currentCountDown.HasValue)
{
    <div style="font-size: 600px; position: absolute; z-index: 2; opacity: 0.5; text-align: center; height: 100%; right: 50%; left: 50%">
        @_currentCountDown.Value
        <p style="font-size: 12px;">@quoteOfTeDay</p>
    </div>
}
@if (!string.IsNullOrEmpty(_snackBarMessage))
{
    <MatSnackbar @bind-IsOpen="_snackBarOpen">
        <MatSnackbarContent>@_snackBarMessage</MatSnackbarContent>
        <MatSnackbarActions>
            <MatButton OnClick="CloseSnackBar" Raised="true">Ok</MatButton>
        </MatSnackbarActions>
    </MatSnackbar>
}

@if (_roomInfo != null)
{
    <div style="width: 90%; position: absolute; left: 0">
        @foreach (var participant in this._participants)
        {
            <MatCard style="width: 200px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; display: inline-block">
                <MatCardContent style="padding: 1rem;">
                    <MatCardMedia Wide="true" style="font-size: 70px; text-align: center">
                        @if (_hiddenResults.Contains(participant.Id))
                        {
                            @("?")
                        }
                        else
                        {
                            @(_voteResults.FirstOrDefault(x => x.UserId == participant.Id)?.Vote.ToString() ?? string.Empty)
                        }
                    </MatCardMedia>
                    <MatHeadline6>@participant.DisplayName</MatHeadline6>
                </MatCardContent>
            </MatCard>
        }
    </div>
    <div style="width: 10%; position: fixed; right: 0">
        <MatList>
            @foreach (var stage in _roomInfo!.Stages)
            {
                <MatListItem OnClick="() => SelectCurrentStage(stage.Id)">
                    <MatListItemText>
                        @if (_roomInfo.CurrentStage != null && stage.Id == _roomInfo!.CurrentStage!.Id)
                        {
                            <MatListItemPrimaryText style="color: green">@stage.Title</MatListItemPrimaryText>
                            <MatListItemSecondaryText style="color: green">Current stage</MatListItemSecondaryText>
                        }
                        else
                        {
                            <MatListItemPrimaryText>@stage.Title</MatListItemPrimaryText>
                        }
                    </MatListItemText>
                </MatListItem>
            }
        </MatList>
        @if (_roomToken!.MemberType == MemberType.Administrator)
        {
            <MatButton OnClick="CreateStage" Icon="@MatIconNames.Add"></MatButton>
        }
        @if (_average != null && _mostRecent != null)
        {
            <p>Average: @_average</p>
            <p>Most votes: @_mostRecent</p>
        }
    </div>
}

@code {
    [Parameter]
    public string? RoomId { get; set; }
    [Parameter]
    public string? RoomPassword { get; set; }

    public MatMenu? VoteMenu;

    private RoomToken? _roomToken;
    private RoomDto? _roomInfo;

    ForwardRef menuRef = new ForwardRef();

    private double? _average = null;
    private int? _mostRecent = null;

    #region SnackBar
    private bool _snackBarOpen = false;

    private string? _snackBarMessage;

    private const string SnackBarMessageFormat = "Client {0} has been {1}";
    #endregion

    private int? _currentCountDown;

    private List<ParticipantDto> _participants = new();
    private List<VotingResult> _voteResults = new();
    private HashSet<Guid> _hiddenResults = new();

    private string? quoteOfTeDay = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _roomToken = await _localStorageService.GetItemAsync<RoomToken?>("auth_token");
        var uri = _navigationManager.ToAbsoluteUri(_navigationManager.Uri);

        quoteOfTeDay = (await _quoteApiClient.QodAsync(null, "en"))?.Contents?.Quotes?.First()?.Quote;

        var parsedQuery = QueryHelpers.ParseNullableQuery(uri.Query);

        if (parsedQuery != null)
        {
            if (parsedQuery.TryGetValue("id", out var id))
            {
                this.RoomId = id.First();
            }

            if (parsedQuery.TryGetValue("password", out var password))
            {
                this.RoomPassword = password.First();
            }

            if ((_roomToken == null || !(await _roomConnectionProvider.Verify(_roomToken.Token))) && RoomId != null)
            {
                var displayName = await _matDialogService.PromptAsync("Please, enter name");
                if (!string.IsNullOrEmpty(displayName))
                {
                    _roomToken = await _roomConnectionProvider.JoinRoom(Guid.Parse(RoomId), displayName, RoomPassword);
                    await _localStorageService.SetItemAsync("auth_token", _roomToken);
                }
                else
                {
                    _navigationManager.NavigateTo("/");
                    return;
                }
            }
        }

        if (_roomToken == null)
        {
            _navigationManager.NavigateTo("/");
            return;
        }
        else
        {
            var verified = await _roomConnectionProvider.Verify(_roomToken.Token);
            if (!verified)
            {
                _navigationManager.NavigateTo("/");
                return;
            }
        }
        await _hubConnectionService.StartConnection(_roomToken!.Token);
        this.SubscribeToMessages();
        this._roomInfo = await _hubConnectionService.FetchRoom();
        this._participants = _roomInfo!.Participants.Select(x => new ParticipantDto(x.Id, x.DisplayName, x.MemberType)).ToList();
        await base.OnInitializedAsync();
    }

    private async Task CreateStage()
    {
        var newStageName = await _matDialogService.PromptAsync("New stage name:");
        if (!string.IsNullOrEmpty(newStageName?.Trim()) && _roomToken!.MemberType == MemberType.Administrator)
        {
            await _hubConnectionService.CreateStage(newStageName);
        }
    }

    private async Task SelectCurrentStage(Guid stageId)
    {
        await _hubConnectionService.SelectStage(stageId);
    }

    private async Task StartCountDown()
    {
        await _hubConnectionService.StartCountDown();
    }

    private async Task Vote(int vote)
    {
        try
        {
            await _hubConnectionService.Vote(vote);
            logger.LogInformation("Vote sent!");
        }
        catch
        {
            await _matDialogService.AlertAsync("Can not vote! Please, try selecting a stage to vote for, or try again later");
            logger.LogError("Vote error");
        }
        
    }

    private void SubscribeToMessages()
    {
        logger.LogInformation("Subscribing...");
        this._hubConnectionService.OnParticipantConnected += (sender, dto) =>
        {
            logger.LogInformation("Client connected, participants: {0}", string.Join(", ", dto.Participants.Select(x => x.DisplayName)));
            this._participants = dto.Participants.ToList();
            this._snackBarMessage = string.Format(SnackBarMessageFormat, dto.AffectedParticipant.DisplayName, "connected");
            this._snackBarOpen = true;
            logger.LogInformation("Current participants: {0}", string.Join(", ", _participants.Select(x => x.DisplayName)));
            this.StateHasChanged();
        };
        this._hubConnectionService.OnParticipantDisconnected += (sender, dto) =>
        {
            logger.LogInformation("Client disconnected, participants: {0}", string.Join(", ", dto.Participants.Select(x => x.DisplayName)));
            this._participants = dto.Participants.ToList();
            this._snackBarMessage = string.Format(SnackBarMessageFormat, dto.AffectedParticipant.DisplayName, "disconnected");
            this._snackBarOpen = true;
            logger.LogInformation("Current participants: {0}", string.Join(", ", _participants.Select(x => x.DisplayName)));
            this.StateHasChanged();
        };
        this._hubConnectionService.OnStageCreated += (sender, result) =>
        {
            if (result != null)
            {
                this._roomInfo!.Stages.Add(new NewStageResult(result.Id, result.Title, result.Deadline)); 
                this.StateHasChanged();
            }
        };
        this._hubConnectionService.OnStageSelected += (sender, guid) =>
        {
            this._roomInfo!.CurrentStage = this._roomInfo!.Stages.First(x => x.Id == guid);
            this._voteResults = new List<VotingResult>();
            this._average = null;
            this._mostRecent = null;
            this.StateHasChanged();
        };
        this._hubConnectionService.OnCountDown += (sender, i) =>
        {
            this._currentCountDown = i;
            this.StateHasChanged();
        };
        this._hubConnectionService.OnStageVotingResult += (sender, results) =>
        {
            this._currentCountDown = null;
            this._hiddenResults.Clear();
            logger.LogInformation("Got vote results: {0}", string.Join(", ", results.Select(x => x.Vote)));
            if (results != null)
            {
                this._voteResults = results.ToList();
                var numericResults = _voteResults.Select(x => x.Vote);
                this._average = numericResults!.Select(x => (double)x).Average();
                var votesGrouping = numericResults!.GroupBy(x => x);
                var maxVotes = votesGrouping.Max(x => x.Count());
                this._mostRecent = votesGrouping.FirstOrDefault(x => x.Count() == maxVotes)?.Key;
            }
            logger.LogInformation("Changed results");
            this.StateHasChanged();
        };
        this._hubConnectionService.OnParticipantVoted += (sender, result) =>
        {
            if (result != null)
            {
                this._hiddenResults.Add(result.UserId);
            }
            this.StateHasChanged();
        };
    }

    private async Task OpenVoteMenu()
    {
        await VoteMenu?.OpenAsync();
    }

    private async Task OpenShareDialog()
    {
        await _matDialogService.AlertAsync(new Uri($"{_navigationManager.BaseUri}room?id={_roomToken!.RoomId}").AbsoluteUri);
    }

    private async Task CloseVoteMenu()
    {
        await VoteMenu?.CloseAsync();
    }

    private void CloseSnackBar()
    {
        this._snackBarOpen = false;
        this.StateHasChanged();
    }
}
