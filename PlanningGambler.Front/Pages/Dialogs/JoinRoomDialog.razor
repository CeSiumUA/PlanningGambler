@using PlanningGambler.Front.Services.Abstract
@using Blazored.LocalStorage
@inject IMatDialogService _matDialogService
@inject IRoomConnectionProvider _roomConnectionProvider
@inject ILocalStorageService _localStorageService

<MatDialogTitle>
    Join room
</MatDialogTitle>
<MatDialogContent>
    <MatTextField FullWidth="true" @bind-Value="@_roomId" Label="Room Number"></MatTextField>
    <MatTextField FullWidth="true" @bind-Value="@_roomDisplayName" Label="Display Name"></MatTextField>
    <MatTextField FullWidth="true" @bind-Value="@_roomPassword" Label="Room Password"></MatTextField>
</MatDialogContent>
<MatDialogActions>
    <MatButton OnClick="@(_ => CloseDialog())">Close</MatButton>
    <MatButton OnClick="@(_ => JoinRoom())">Join</MatButton>
</MatDialogActions>

@code {
    private string _roomId = string.Empty;
    private string _roomPassword = string.Empty;
    private string _roomDisplayName = string.Empty;

    [CascadingParameter]
    public MatDialogReference? DialogReference { get; set; }

    private void CloseDialog()
    {
        DialogReference?.Close("Closed");
    }

    private async Task JoinRoom()
    {
        var token = await _roomConnectionProvider.JoinRoom(Guid.Parse(_roomId), _roomDisplayName, string.IsNullOrEmpty(_roomPassword) ? null : _roomPassword);
        await _localStorageService.SetItemAsync("auth_token", token);
        DialogReference?.Close("Closed");
    }
}
