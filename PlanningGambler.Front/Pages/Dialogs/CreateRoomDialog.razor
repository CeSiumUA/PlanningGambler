@using PlanningGambler.Front.Services.Abstract
@using Blazored.LocalStorage
@using System.Text.Json
@inject NavigationManager _navigationManager
@inject IMatDialogService _matDialogService
@inject IRoomConnectionProvider _roomConnectionProvider
@inject ILocalStorageService _localStorageService

<MatDialogTitle>
    Create room
</MatDialogTitle>
<MatDialogContent>
    <MatTextField FullWidth="true" @bind-Value="@_roomDisplayName" Label="Display Name"></MatTextField>
    <MatTextField FullWidth="true" @bind-Value="@_roomPassword" Label="Room Password"></MatTextField>
    <div>
        <MatCheckbox @bind-Value="_useJiraLinks" Label="Use JIRA"></MatCheckbox>
        @if (_useJiraLinks)
        {
            <MatTextField FullWidth="true" @bind-Value="@_jiraAddress" Label="JIRA example links"></MatTextField>
        }
    </div>
</MatDialogContent>
<MatDialogActions>
    <MatButton OnClick="@(_ => CloseDialog())">Close</MatButton>
    <MatButton OnClick="@(_ => CreateRoom())">Create</MatButton>
</MatDialogActions>

@code {
    private string _roomPassword = string.Empty;
    private string _roomDisplayName = string.Empty;
    private bool _useJiraLinks;
    private string? _jiraAddress;

    [CascadingParameter]
    public MatDialogReference? DialogReference { get; set; }

    private void CloseDialog()
    {
        DialogReference?.Close("Closed");
    }

    private async Task CreateRoom()
    {
        var token = await _roomConnectionProvider.CreateRoom(_roomDisplayName, string.IsNullOrEmpty(_roomPassword) ? null : _roomPassword, _useJiraLinks, _jiraAddress);
        await _localStorageService.SetItemAsync("auth_token", token);
        DialogReference?.Close("Closed");
        _navigationManager.NavigateTo("/room");
    }
}
